language: elm
node_js: '12'

sudo: required
dist: trusty

elm-test: 0.19.0-rev6
elm-format: 0.8.1

cache:
  yarn: true
  directories:
    - node_modules
    - elm-stuff
    - gh-pages/dist
env:
  global:
     - GAME_SOUNDS=""
     - NODE_ENV=production
  matrix:
    - GAME=MazePlatformer GAME_FILE="platformer/demo.json" GAME_FAVICON="platformer/favicon.png" GAME_SOUNDS="gh-pages/platformer/sounds"
    - GAME=RPG GAME_FILE="top-down-adventure/demo.json" GAME_FAVICON="top-down-adventure/favicon.png"
    - GAME=Shump GAME_FILE="space-shooter/demo.json" GAME_FAVICON="space-shooter/favicon.png"

os:
  - linux
  - osx

before_install:
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y ppa:mc3man/trusty-media; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -y ffmpeg; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew update; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install ffmpeg; fi
  - ffmpeg -hwaccels
  #  for Electron application
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export DISPLAY=:99.0; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sh -e /etc/init.d/xvfb start; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sleep 3; fi

before_script:
  - elm-format --validate . && elm-test #&& elm-test lib/elm-tiled && elm-test lib/elm-image

script:
  - elm make examples/${GAME}/Game.elm --optimize --output=./gh-pages/dist/${GAME}_bundle.js
  - elm make "examples/${GAME}/Build.elm" --optimize --output=./gh-pages/dist/${GAME}_encoder.js
  - jscodeshift -t transform.js ./gh-pages/dist/${GAME}_bundle.js
  - uglifyjs ./gh-pages/dist/${GAME}_bundle.js --compress "pure_funcs=[F2,F3,F4,F5,F6,F7,F8,F9,A2,A3,A4,A5,A6,A7,A8,A9],pure_getters" --output=./gh-pages/dist/${GAME}_bundle.js
  - prepack ./gh-pages/dist/${GAME}_bundle.js --inlineExpressions --out ./gh-pages/dist/${GAME}_bundle.js
  - terser ./gh-pages/dist/${GAME}_bundle.js ./gh-pages/script.js --compress 'keep_fargs=false,unsafe_comps,unsafe' --mangle --output=./gh-pages/dist/${GAME}_bundle.js
  - posthtml ./gh-pages/game.html -o ./gh-pages/dist/${GAME}.html -c posthtml.config.js
  - if [ "$GAME_SOUNDS" != "" ]; then audiosprite --format howler2 --loop Background --output ./gh-pages/dist/${GAME} "${GAME_SOUNDS}/*.+(mp3|wav)" -u /; fi
  - node build-assets.js
  - if [ "$GAME_SOUNDS" != "" ]; then rm ./gh-pages/dist/${GAME}.json; fi

jobs:
  fast_finish: true
  include:
    - stage: after_success
      before_install: echo "Build Landing before_install"
      before_script: echo "Build Landing before_script"
      script: echo "Build Landing"
      # Keep in mind to overwrite these here
      env: FOO=foo
    - stage: deploy
      before_install: echo "Build Deploy before_install"
      before_script: echo "Build Deploy before_script"
      script: echo Deploy
      # Keep in mind to overwrite these here
      env: FOO=foo




#  elm make examples/${GAME}/Game.elm --optimize --output=./gh-pages/dist/${GAME}_bundle.js \
#  && elm make "examples/${GAME}/Build.elm" --optimize --output=./gh-pages/dist/${GAME}_encoder.js \
#  && jscodeshift -t transform.js ./gh-pages/dist/${GAME}_bundle.js \
#  && uglifyjs ./gh-pages/dist/${GAME}_bundle.js --compress "pure_funcs=[F2,F3,F4,F5,F6,F7,F8,F9,A2,A3,A4,A5,A6,A7,A8,A9],pure_getters" --output=./gh-pages/dist/${GAME}_bundle.js \
#  && prepack ./gh-pages/dist/${GAME}_bundle.js --inlineExpressions --out ./gh-pages/dist/${GAME}_bundle.js \
#  && terser ./gh-pages/dist/${GAME}_bundle.js ./gh-pages/script.js --compress 'keep_fargs=false,unsafe_comps,unsafe' --mangle --output=./gh-pages/dist/${GAME}_bundle.js \
#  && npx posthtml ./gh-pages/game.html -o ./gh-pages/dist/${GAME}.html -c posthtml.config.js \
#  && if [ "$GAME_SOUNDS" != "" ]; then audiosprite --format howler2 --loop Background --output ./gh-pages/dist/${GAME} "${GAME_SOUNDS}/*.+(mp3|wav)" -u /; fi \
#  && node build-assets.js \
#  && if [ "$GAME_SOUNDS" != "" ]; then rm ./gh-pages/dist/${GAME}.json; fi


###
### audiosprite --format howler2 --loop Background --output ./gh-pages/sounds/MazePlatformer gh-pages/platformer/sounds/*.mp3 -u ./sounds/MazePlatformer
###
##https://docs.travis-ci.com/user/build-stages/matrix-expansion/
# RUN SINGLE after_success that produces LandingPage

#script:
#  - elm-format --validate . && elm-test && elm-test lib/elm-tiled && elm-test lib/elm-image
#  #  - && elm-test lib/elm-logic-templates
#
#  - elm make ./examples/Game.elm --optimize --output=./gh-pages/bundle.js
#  - elm make ./examples/Build.elm --optimize --output=./gh-pages/encoder.js
#  - jscodeshift -t transform.js ./gh-pages/bundle.js
#  - uglifyjs ./gh-pages/bundle.js --compress "pure_funcs=[F2,F3,F4,F5,F6,F7,F8,F9,A2,A3,A4,A5,A6,A7,A8,A9],pure_getters" --output=./gh-pages/bundle.js
#  - prepack ./gh-pages/bundle.js --inlineExpressions --out ./gh-pages/bundle.js
#  - terser ./gh-pages/bundle.js ./gh-pages/script.js --compress 'keep_fargs=false,unsafe_comps,unsafe' --mangle --output=./gh-pages/bundle.js
#
#
#after_success:
#  #  - uglifyjs ./gh-pages/bundle.js --compress "pure_funcs=[F2,F3,F4,F5,F6,F7,F8,F9,A2,A3,A4,A5,A6,A7,A8,A9],pure_getters,keep_fargs=false,unsafe_comps,unsafe" | uglifyjs --mangle --output=./gh-pages/bundle.js
#  - git clone -b assets --single-branch https://github.com/$TRAVIS_REPO_SLUG.git ./gh-pages/assets
#  - mkdir -p ./gh-pages/images
#  - posthtml ./gh-pages/index.html -o ./gh-pages/index.html -c posthtml.config.js
#  - audiosprite --format howler2 --loop Background --output ./gh-pages/pack/audiosprite ./gh-pages/assets/sounds/*.wav ./gh-pages/assets/sounds/*.mp3 -u ./pack
#  - node build-assets.js assets/demo.json

# https://docs.travis-ci.com/user/build-stages/
# https://docs.travis-ci.com/user/build-stages/matrix-expansion/
#deploy:
#  provider: pages
#  skip-cleanup: true
#  github-token: $GITHUB_TOKEN
#  keep-history: true
#  local-dir: gh-pages/dist
#  on:
#    branch: master
